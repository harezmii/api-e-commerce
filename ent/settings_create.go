// Code generated by entc, DO NOT EDIT.

package ent

import (
	"api/ent/settings"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SettingsCreate is the builder for creating a Settings entity.
type SettingsCreate struct {
	config
	mutation *SettingsMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (sc *SettingsCreate) SetTitle(s string) *SettingsCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetKeywords sets the "keywords" field.
func (sc *SettingsCreate) SetKeywords(s string) *SettingsCreate {
	sc.mutation.SetKeywords(s)
	return sc
}

// SetDescription sets the "description" field.
func (sc *SettingsCreate) SetDescription(s string) *SettingsCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetCompany sets the "company" field.
func (sc *SettingsCreate) SetCompany(s string) *SettingsCreate {
	sc.mutation.SetCompany(s)
	return sc
}

// SetAddress sets the "address" field.
func (sc *SettingsCreate) SetAddress(s string) *SettingsCreate {
	sc.mutation.SetAddress(s)
	return sc
}

// SetPhone sets the "phone" field.
func (sc *SettingsCreate) SetPhone(s string) *SettingsCreate {
	sc.mutation.SetPhone(s)
	return sc
}

// SetFax sets the "fax" field.
func (sc *SettingsCreate) SetFax(s string) *SettingsCreate {
	sc.mutation.SetFax(s)
	return sc
}

// SetEmail sets the "email" field.
func (sc *SettingsCreate) SetEmail(s string) *SettingsCreate {
	sc.mutation.SetEmail(s)
	return sc
}

// SetMailServerAddress sets the "mailServerAddress" field.
func (sc *SettingsCreate) SetMailServerAddress(s string) *SettingsCreate {
	sc.mutation.SetMailServerAddress(s)
	return sc
}

// SetMailServerEmail sets the "mailServerEmail" field.
func (sc *SettingsCreate) SetMailServerEmail(s string) *SettingsCreate {
	sc.mutation.SetMailServerEmail(s)
	return sc
}

// SetMailServerPassword sets the "mailServerPassword" field.
func (sc *SettingsCreate) SetMailServerPassword(s string) *SettingsCreate {
	sc.mutation.SetMailServerPassword(s)
	return sc
}

// SetMailServerPort sets the "mailServerPort" field.
func (sc *SettingsCreate) SetMailServerPort(s string) *SettingsCreate {
	sc.mutation.SetMailServerPort(s)
	return sc
}

// SetFacebook sets the "facebook" field.
func (sc *SettingsCreate) SetFacebook(s string) *SettingsCreate {
	sc.mutation.SetFacebook(s)
	return sc
}

// SetInstagram sets the "Instagram" field.
func (sc *SettingsCreate) SetInstagram(s string) *SettingsCreate {
	sc.mutation.SetInstagram(s)
	return sc
}

// SetTwitter sets the "twitter" field.
func (sc *SettingsCreate) SetTwitter(s string) *SettingsCreate {
	sc.mutation.SetTwitter(s)
	return sc
}

// SetAbout sets the "about" field.
func (sc *SettingsCreate) SetAbout(s string) *SettingsCreate {
	sc.mutation.SetAbout(s)
	return sc
}

// SetContact sets the "contact" field.
func (sc *SettingsCreate) SetContact(s string) *SettingsCreate {
	sc.mutation.SetContact(s)
	return sc
}

// SetReferences sets the "references" field.
func (sc *SettingsCreate) SetReferences(s string) *SettingsCreate {
	sc.mutation.SetReferences(s)
	return sc
}

// SetStatus sets the "status" field.
func (sc *SettingsCreate) SetStatus(b bool) *SettingsCreate {
	sc.mutation.SetStatus(b)
	return sc
}

// Mutation returns the SettingsMutation object of the builder.
func (sc *SettingsCreate) Mutation() *SettingsMutation {
	return sc.mutation
}

// Save creates the Settings in the database.
func (sc *SettingsCreate) Save(ctx context.Context) (*Settings, error) {
	var (
		err  error
		node *Settings
	)
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SettingsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SettingsCreate) SaveX(ctx context.Context) *Settings {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SettingsCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SettingsCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SettingsCreate) check() error {
	if _, ok := sc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Settings.title"`)}
	}
	if _, ok := sc.mutation.Keywords(); !ok {
		return &ValidationError{Name: "keywords", err: errors.New(`ent: missing required field "Settings.keywords"`)}
	}
	if _, ok := sc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Settings.description"`)}
	}
	if _, ok := sc.mutation.Company(); !ok {
		return &ValidationError{Name: "company", err: errors.New(`ent: missing required field "Settings.company"`)}
	}
	if _, ok := sc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Settings.address"`)}
	}
	if _, ok := sc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Settings.phone"`)}
	}
	if _, ok := sc.mutation.Fax(); !ok {
		return &ValidationError{Name: "fax", err: errors.New(`ent: missing required field "Settings.fax"`)}
	}
	if _, ok := sc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Settings.email"`)}
	}
	if _, ok := sc.mutation.MailServerAddress(); !ok {
		return &ValidationError{Name: "mailServerAddress", err: errors.New(`ent: missing required field "Settings.mailServerAddress"`)}
	}
	if _, ok := sc.mutation.MailServerEmail(); !ok {
		return &ValidationError{Name: "mailServerEmail", err: errors.New(`ent: missing required field "Settings.mailServerEmail"`)}
	}
	if _, ok := sc.mutation.MailServerPassword(); !ok {
		return &ValidationError{Name: "mailServerPassword", err: errors.New(`ent: missing required field "Settings.mailServerPassword"`)}
	}
	if _, ok := sc.mutation.MailServerPort(); !ok {
		return &ValidationError{Name: "mailServerPort", err: errors.New(`ent: missing required field "Settings.mailServerPort"`)}
	}
	if _, ok := sc.mutation.Facebook(); !ok {
		return &ValidationError{Name: "facebook", err: errors.New(`ent: missing required field "Settings.facebook"`)}
	}
	if _, ok := sc.mutation.Instagram(); !ok {
		return &ValidationError{Name: "Instagram", err: errors.New(`ent: missing required field "Settings.Instagram"`)}
	}
	if _, ok := sc.mutation.Twitter(); !ok {
		return &ValidationError{Name: "twitter", err: errors.New(`ent: missing required field "Settings.twitter"`)}
	}
	if _, ok := sc.mutation.About(); !ok {
		return &ValidationError{Name: "about", err: errors.New(`ent: missing required field "Settings.about"`)}
	}
	if _, ok := sc.mutation.Contact(); !ok {
		return &ValidationError{Name: "contact", err: errors.New(`ent: missing required field "Settings.contact"`)}
	}
	if _, ok := sc.mutation.References(); !ok {
		return &ValidationError{Name: "references", err: errors.New(`ent: missing required field "Settings.references"`)}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Settings.status"`)}
	}
	return nil
}

func (sc *SettingsCreate) sqlSave(ctx context.Context) (*Settings, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *SettingsCreate) createSpec() (*Settings, *sqlgraph.CreateSpec) {
	var (
		_node = &Settings{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: settings.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: settings.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := sc.mutation.Keywords(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldKeywords,
		})
		_node.Keywords = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := sc.mutation.Company(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldCompany,
		})
		_node.Company = value
	}
	if value, ok := sc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := sc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := sc.mutation.Fax(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldFax,
		})
		_node.Fax = value
	}
	if value, ok := sc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := sc.mutation.MailServerAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldMailServerAddress,
		})
		_node.MailServerAddress = value
	}
	if value, ok := sc.mutation.MailServerEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldMailServerEmail,
		})
		_node.MailServerEmail = value
	}
	if value, ok := sc.mutation.MailServerPassword(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldMailServerPassword,
		})
		_node.MailServerPassword = value
	}
	if value, ok := sc.mutation.MailServerPort(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldMailServerPort,
		})
		_node.MailServerPort = value
	}
	if value, ok := sc.mutation.Facebook(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldFacebook,
		})
		_node.Facebook = value
	}
	if value, ok := sc.mutation.Instagram(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldInstagram,
		})
		_node.Instagram = value
	}
	if value, ok := sc.mutation.Twitter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldTwitter,
		})
		_node.Twitter = value
	}
	if value, ok := sc.mutation.About(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldAbout,
		})
		_node.About = value
	}
	if value, ok := sc.mutation.Contact(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldContact,
		})
		_node.Contact = value
	}
	if value, ok := sc.mutation.References(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldReferences,
		})
		_node.References = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: settings.FieldStatus,
		})
		_node.Status = value
	}
	return _node, _spec
}

// SettingsCreateBulk is the builder for creating many Settings entities in bulk.
type SettingsCreateBulk struct {
	config
	builders []*SettingsCreate
}

// Save creates the Settings entities in the database.
func (scb *SettingsCreateBulk) Save(ctx context.Context) ([]*Settings, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Settings, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SettingsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SettingsCreateBulk) SaveX(ctx context.Context) []*Settings {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SettingsCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SettingsCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
