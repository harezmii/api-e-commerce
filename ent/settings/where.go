// Code generated by entc, DO NOT EDIT.

package settings

import (
	"api/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Keywords applies equality check predicate on the "keywords" field. It's identical to KeywordsEQ.
func Keywords(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKeywords), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Company applies equality check predicate on the "company" field. It's identical to CompanyEQ.
func Company(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompany), v))
	})
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// Fax applies equality check predicate on the "fax" field. It's identical to FaxEQ.
func Fax(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFax), v))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// MailServerAddress applies equality check predicate on the "mailServerAddress" field. It's identical to MailServerAddressEQ.
func MailServerAddress(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMailServerAddress), v))
	})
}

// MailServerEmail applies equality check predicate on the "mailServerEmail" field. It's identical to MailServerEmailEQ.
func MailServerEmail(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMailServerEmail), v))
	})
}

// MailServerPassword applies equality check predicate on the "mailServerPassword" field. It's identical to MailServerPasswordEQ.
func MailServerPassword(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMailServerPassword), v))
	})
}

// MailServerPort applies equality check predicate on the "mailServerPort" field. It's identical to MailServerPortEQ.
func MailServerPort(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMailServerPort), v))
	})
}

// Facebook applies equality check predicate on the "facebook" field. It's identical to FacebookEQ.
func Facebook(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacebook), v))
	})
}

// Instagram applies equality check predicate on the "Instagram" field. It's identical to InstagramEQ.
func Instagram(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstagram), v))
	})
}

// Twitter applies equality check predicate on the "twitter" field. It's identical to TwitterEQ.
func Twitter(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTwitter), v))
	})
}

// About applies equality check predicate on the "about" field. It's identical to AboutEQ.
func About(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAbout), v))
	})
}

// Contact applies equality check predicate on the "contact" field. It's identical to ContactEQ.
func Contact(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContact), v))
	})
}

// References applies equality check predicate on the "references" field. It's identical to ReferencesEQ.
func References(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferences), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v bool) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// KeywordsEQ applies the EQ predicate on the "keywords" field.
func KeywordsEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKeywords), v))
	})
}

// KeywordsNEQ applies the NEQ predicate on the "keywords" field.
func KeywordsNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKeywords), v))
	})
}

// KeywordsIn applies the In predicate on the "keywords" field.
func KeywordsIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKeywords), v...))
	})
}

// KeywordsNotIn applies the NotIn predicate on the "keywords" field.
func KeywordsNotIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKeywords), v...))
	})
}

// KeywordsGT applies the GT predicate on the "keywords" field.
func KeywordsGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKeywords), v))
	})
}

// KeywordsGTE applies the GTE predicate on the "keywords" field.
func KeywordsGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKeywords), v))
	})
}

// KeywordsLT applies the LT predicate on the "keywords" field.
func KeywordsLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKeywords), v))
	})
}

// KeywordsLTE applies the LTE predicate on the "keywords" field.
func KeywordsLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKeywords), v))
	})
}

// KeywordsContains applies the Contains predicate on the "keywords" field.
func KeywordsContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKeywords), v))
	})
}

// KeywordsHasPrefix applies the HasPrefix predicate on the "keywords" field.
func KeywordsHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKeywords), v))
	})
}

// KeywordsHasSuffix applies the HasSuffix predicate on the "keywords" field.
func KeywordsHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKeywords), v))
	})
}

// KeywordsEqualFold applies the EqualFold predicate on the "keywords" field.
func KeywordsEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKeywords), v))
	})
}

// KeywordsContainsFold applies the ContainsFold predicate on the "keywords" field.
func KeywordsContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKeywords), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// CompanyEQ applies the EQ predicate on the "company" field.
func CompanyEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompany), v))
	})
}

// CompanyNEQ applies the NEQ predicate on the "company" field.
func CompanyNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCompany), v))
	})
}

// CompanyIn applies the In predicate on the "company" field.
func CompanyIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCompany), v...))
	})
}

// CompanyNotIn applies the NotIn predicate on the "company" field.
func CompanyNotIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCompany), v...))
	})
}

// CompanyGT applies the GT predicate on the "company" field.
func CompanyGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCompany), v))
	})
}

// CompanyGTE applies the GTE predicate on the "company" field.
func CompanyGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCompany), v))
	})
}

// CompanyLT applies the LT predicate on the "company" field.
func CompanyLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCompany), v))
	})
}

// CompanyLTE applies the LTE predicate on the "company" field.
func CompanyLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCompany), v))
	})
}

// CompanyContains applies the Contains predicate on the "company" field.
func CompanyContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCompany), v))
	})
}

// CompanyHasPrefix applies the HasPrefix predicate on the "company" field.
func CompanyHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCompany), v))
	})
}

// CompanyHasSuffix applies the HasSuffix predicate on the "company" field.
func CompanyHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCompany), v))
	})
}

// CompanyEqualFold applies the EqualFold predicate on the "company" field.
func CompanyEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCompany), v))
	})
}

// CompanyContainsFold applies the ContainsFold predicate on the "company" field.
func CompanyContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCompany), v))
	})
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddress), v))
	})
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddress), v...))
	})
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddress), v...))
	})
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddress), v))
	})
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddress), v))
	})
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddress), v))
	})
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddress), v))
	})
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddress), v))
	})
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddress), v))
	})
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddress), v))
	})
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddress), v))
	})
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddress), v))
	})
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhone), v))
	})
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhone), v...))
	})
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhone), v...))
	})
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhone), v))
	})
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhone), v))
	})
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhone), v))
	})
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhone), v))
	})
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhone), v))
	})
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhone), v))
	})
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhone), v))
	})
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhone), v))
	})
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhone), v))
	})
}

// FaxEQ applies the EQ predicate on the "fax" field.
func FaxEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFax), v))
	})
}

// FaxNEQ applies the NEQ predicate on the "fax" field.
func FaxNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFax), v))
	})
}

// FaxIn applies the In predicate on the "fax" field.
func FaxIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFax), v...))
	})
}

// FaxNotIn applies the NotIn predicate on the "fax" field.
func FaxNotIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFax), v...))
	})
}

// FaxGT applies the GT predicate on the "fax" field.
func FaxGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFax), v))
	})
}

// FaxGTE applies the GTE predicate on the "fax" field.
func FaxGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFax), v))
	})
}

// FaxLT applies the LT predicate on the "fax" field.
func FaxLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFax), v))
	})
}

// FaxLTE applies the LTE predicate on the "fax" field.
func FaxLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFax), v))
	})
}

// FaxContains applies the Contains predicate on the "fax" field.
func FaxContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFax), v))
	})
}

// FaxHasPrefix applies the HasPrefix predicate on the "fax" field.
func FaxHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFax), v))
	})
}

// FaxHasSuffix applies the HasSuffix predicate on the "fax" field.
func FaxHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFax), v))
	})
}

// FaxEqualFold applies the EqualFold predicate on the "fax" field.
func FaxEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFax), v))
	})
}

// FaxContainsFold applies the ContainsFold predicate on the "fax" field.
func FaxContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFax), v))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// MailServerAddressEQ applies the EQ predicate on the "mailServerAddress" field.
func MailServerAddressEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMailServerAddress), v))
	})
}

// MailServerAddressNEQ applies the NEQ predicate on the "mailServerAddress" field.
func MailServerAddressNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMailServerAddress), v))
	})
}

// MailServerAddressIn applies the In predicate on the "mailServerAddress" field.
func MailServerAddressIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMailServerAddress), v...))
	})
}

// MailServerAddressNotIn applies the NotIn predicate on the "mailServerAddress" field.
func MailServerAddressNotIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMailServerAddress), v...))
	})
}

// MailServerAddressGT applies the GT predicate on the "mailServerAddress" field.
func MailServerAddressGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMailServerAddress), v))
	})
}

// MailServerAddressGTE applies the GTE predicate on the "mailServerAddress" field.
func MailServerAddressGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMailServerAddress), v))
	})
}

// MailServerAddressLT applies the LT predicate on the "mailServerAddress" field.
func MailServerAddressLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMailServerAddress), v))
	})
}

// MailServerAddressLTE applies the LTE predicate on the "mailServerAddress" field.
func MailServerAddressLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMailServerAddress), v))
	})
}

// MailServerAddressContains applies the Contains predicate on the "mailServerAddress" field.
func MailServerAddressContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMailServerAddress), v))
	})
}

// MailServerAddressHasPrefix applies the HasPrefix predicate on the "mailServerAddress" field.
func MailServerAddressHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMailServerAddress), v))
	})
}

// MailServerAddressHasSuffix applies the HasSuffix predicate on the "mailServerAddress" field.
func MailServerAddressHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMailServerAddress), v))
	})
}

// MailServerAddressEqualFold applies the EqualFold predicate on the "mailServerAddress" field.
func MailServerAddressEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMailServerAddress), v))
	})
}

// MailServerAddressContainsFold applies the ContainsFold predicate on the "mailServerAddress" field.
func MailServerAddressContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMailServerAddress), v))
	})
}

// MailServerEmailEQ applies the EQ predicate on the "mailServerEmail" field.
func MailServerEmailEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMailServerEmail), v))
	})
}

// MailServerEmailNEQ applies the NEQ predicate on the "mailServerEmail" field.
func MailServerEmailNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMailServerEmail), v))
	})
}

// MailServerEmailIn applies the In predicate on the "mailServerEmail" field.
func MailServerEmailIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMailServerEmail), v...))
	})
}

// MailServerEmailNotIn applies the NotIn predicate on the "mailServerEmail" field.
func MailServerEmailNotIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMailServerEmail), v...))
	})
}

// MailServerEmailGT applies the GT predicate on the "mailServerEmail" field.
func MailServerEmailGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMailServerEmail), v))
	})
}

// MailServerEmailGTE applies the GTE predicate on the "mailServerEmail" field.
func MailServerEmailGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMailServerEmail), v))
	})
}

// MailServerEmailLT applies the LT predicate on the "mailServerEmail" field.
func MailServerEmailLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMailServerEmail), v))
	})
}

// MailServerEmailLTE applies the LTE predicate on the "mailServerEmail" field.
func MailServerEmailLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMailServerEmail), v))
	})
}

// MailServerEmailContains applies the Contains predicate on the "mailServerEmail" field.
func MailServerEmailContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMailServerEmail), v))
	})
}

// MailServerEmailHasPrefix applies the HasPrefix predicate on the "mailServerEmail" field.
func MailServerEmailHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMailServerEmail), v))
	})
}

// MailServerEmailHasSuffix applies the HasSuffix predicate on the "mailServerEmail" field.
func MailServerEmailHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMailServerEmail), v))
	})
}

// MailServerEmailEqualFold applies the EqualFold predicate on the "mailServerEmail" field.
func MailServerEmailEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMailServerEmail), v))
	})
}

// MailServerEmailContainsFold applies the ContainsFold predicate on the "mailServerEmail" field.
func MailServerEmailContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMailServerEmail), v))
	})
}

// MailServerPasswordEQ applies the EQ predicate on the "mailServerPassword" field.
func MailServerPasswordEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMailServerPassword), v))
	})
}

// MailServerPasswordNEQ applies the NEQ predicate on the "mailServerPassword" field.
func MailServerPasswordNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMailServerPassword), v))
	})
}

// MailServerPasswordIn applies the In predicate on the "mailServerPassword" field.
func MailServerPasswordIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMailServerPassword), v...))
	})
}

// MailServerPasswordNotIn applies the NotIn predicate on the "mailServerPassword" field.
func MailServerPasswordNotIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMailServerPassword), v...))
	})
}

// MailServerPasswordGT applies the GT predicate on the "mailServerPassword" field.
func MailServerPasswordGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMailServerPassword), v))
	})
}

// MailServerPasswordGTE applies the GTE predicate on the "mailServerPassword" field.
func MailServerPasswordGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMailServerPassword), v))
	})
}

// MailServerPasswordLT applies the LT predicate on the "mailServerPassword" field.
func MailServerPasswordLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMailServerPassword), v))
	})
}

// MailServerPasswordLTE applies the LTE predicate on the "mailServerPassword" field.
func MailServerPasswordLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMailServerPassword), v))
	})
}

// MailServerPasswordContains applies the Contains predicate on the "mailServerPassword" field.
func MailServerPasswordContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMailServerPassword), v))
	})
}

// MailServerPasswordHasPrefix applies the HasPrefix predicate on the "mailServerPassword" field.
func MailServerPasswordHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMailServerPassword), v))
	})
}

// MailServerPasswordHasSuffix applies the HasSuffix predicate on the "mailServerPassword" field.
func MailServerPasswordHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMailServerPassword), v))
	})
}

// MailServerPasswordEqualFold applies the EqualFold predicate on the "mailServerPassword" field.
func MailServerPasswordEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMailServerPassword), v))
	})
}

// MailServerPasswordContainsFold applies the ContainsFold predicate on the "mailServerPassword" field.
func MailServerPasswordContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMailServerPassword), v))
	})
}

// MailServerPortEQ applies the EQ predicate on the "mailServerPort" field.
func MailServerPortEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMailServerPort), v))
	})
}

// MailServerPortNEQ applies the NEQ predicate on the "mailServerPort" field.
func MailServerPortNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMailServerPort), v))
	})
}

// MailServerPortIn applies the In predicate on the "mailServerPort" field.
func MailServerPortIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMailServerPort), v...))
	})
}

// MailServerPortNotIn applies the NotIn predicate on the "mailServerPort" field.
func MailServerPortNotIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMailServerPort), v...))
	})
}

// MailServerPortGT applies the GT predicate on the "mailServerPort" field.
func MailServerPortGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMailServerPort), v))
	})
}

// MailServerPortGTE applies the GTE predicate on the "mailServerPort" field.
func MailServerPortGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMailServerPort), v))
	})
}

// MailServerPortLT applies the LT predicate on the "mailServerPort" field.
func MailServerPortLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMailServerPort), v))
	})
}

// MailServerPortLTE applies the LTE predicate on the "mailServerPort" field.
func MailServerPortLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMailServerPort), v))
	})
}

// MailServerPortContains applies the Contains predicate on the "mailServerPort" field.
func MailServerPortContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMailServerPort), v))
	})
}

// MailServerPortHasPrefix applies the HasPrefix predicate on the "mailServerPort" field.
func MailServerPortHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMailServerPort), v))
	})
}

// MailServerPortHasSuffix applies the HasSuffix predicate on the "mailServerPort" field.
func MailServerPortHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMailServerPort), v))
	})
}

// MailServerPortEqualFold applies the EqualFold predicate on the "mailServerPort" field.
func MailServerPortEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMailServerPort), v))
	})
}

// MailServerPortContainsFold applies the ContainsFold predicate on the "mailServerPort" field.
func MailServerPortContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMailServerPort), v))
	})
}

// FacebookEQ applies the EQ predicate on the "facebook" field.
func FacebookEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacebook), v))
	})
}

// FacebookNEQ applies the NEQ predicate on the "facebook" field.
func FacebookNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFacebook), v))
	})
}

// FacebookIn applies the In predicate on the "facebook" field.
func FacebookIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFacebook), v...))
	})
}

// FacebookNotIn applies the NotIn predicate on the "facebook" field.
func FacebookNotIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFacebook), v...))
	})
}

// FacebookGT applies the GT predicate on the "facebook" field.
func FacebookGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFacebook), v))
	})
}

// FacebookGTE applies the GTE predicate on the "facebook" field.
func FacebookGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFacebook), v))
	})
}

// FacebookLT applies the LT predicate on the "facebook" field.
func FacebookLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFacebook), v))
	})
}

// FacebookLTE applies the LTE predicate on the "facebook" field.
func FacebookLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFacebook), v))
	})
}

// FacebookContains applies the Contains predicate on the "facebook" field.
func FacebookContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFacebook), v))
	})
}

// FacebookHasPrefix applies the HasPrefix predicate on the "facebook" field.
func FacebookHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFacebook), v))
	})
}

// FacebookHasSuffix applies the HasSuffix predicate on the "facebook" field.
func FacebookHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFacebook), v))
	})
}

// FacebookEqualFold applies the EqualFold predicate on the "facebook" field.
func FacebookEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFacebook), v))
	})
}

// FacebookContainsFold applies the ContainsFold predicate on the "facebook" field.
func FacebookContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFacebook), v))
	})
}

// InstagramEQ applies the EQ predicate on the "Instagram" field.
func InstagramEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstagram), v))
	})
}

// InstagramNEQ applies the NEQ predicate on the "Instagram" field.
func InstagramNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstagram), v))
	})
}

// InstagramIn applies the In predicate on the "Instagram" field.
func InstagramIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstagram), v...))
	})
}

// InstagramNotIn applies the NotIn predicate on the "Instagram" field.
func InstagramNotIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstagram), v...))
	})
}

// InstagramGT applies the GT predicate on the "Instagram" field.
func InstagramGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstagram), v))
	})
}

// InstagramGTE applies the GTE predicate on the "Instagram" field.
func InstagramGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstagram), v))
	})
}

// InstagramLT applies the LT predicate on the "Instagram" field.
func InstagramLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstagram), v))
	})
}

// InstagramLTE applies the LTE predicate on the "Instagram" field.
func InstagramLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstagram), v))
	})
}

// InstagramContains applies the Contains predicate on the "Instagram" field.
func InstagramContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstagram), v))
	})
}

// InstagramHasPrefix applies the HasPrefix predicate on the "Instagram" field.
func InstagramHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstagram), v))
	})
}

// InstagramHasSuffix applies the HasSuffix predicate on the "Instagram" field.
func InstagramHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstagram), v))
	})
}

// InstagramEqualFold applies the EqualFold predicate on the "Instagram" field.
func InstagramEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstagram), v))
	})
}

// InstagramContainsFold applies the ContainsFold predicate on the "Instagram" field.
func InstagramContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstagram), v))
	})
}

// TwitterEQ applies the EQ predicate on the "twitter" field.
func TwitterEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTwitter), v))
	})
}

// TwitterNEQ applies the NEQ predicate on the "twitter" field.
func TwitterNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTwitter), v))
	})
}

// TwitterIn applies the In predicate on the "twitter" field.
func TwitterIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTwitter), v...))
	})
}

// TwitterNotIn applies the NotIn predicate on the "twitter" field.
func TwitterNotIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTwitter), v...))
	})
}

// TwitterGT applies the GT predicate on the "twitter" field.
func TwitterGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTwitter), v))
	})
}

// TwitterGTE applies the GTE predicate on the "twitter" field.
func TwitterGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTwitter), v))
	})
}

// TwitterLT applies the LT predicate on the "twitter" field.
func TwitterLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTwitter), v))
	})
}

// TwitterLTE applies the LTE predicate on the "twitter" field.
func TwitterLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTwitter), v))
	})
}

// TwitterContains applies the Contains predicate on the "twitter" field.
func TwitterContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTwitter), v))
	})
}

// TwitterHasPrefix applies the HasPrefix predicate on the "twitter" field.
func TwitterHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTwitter), v))
	})
}

// TwitterHasSuffix applies the HasSuffix predicate on the "twitter" field.
func TwitterHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTwitter), v))
	})
}

// TwitterEqualFold applies the EqualFold predicate on the "twitter" field.
func TwitterEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTwitter), v))
	})
}

// TwitterContainsFold applies the ContainsFold predicate on the "twitter" field.
func TwitterContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTwitter), v))
	})
}

// AboutEQ applies the EQ predicate on the "about" field.
func AboutEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAbout), v))
	})
}

// AboutNEQ applies the NEQ predicate on the "about" field.
func AboutNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAbout), v))
	})
}

// AboutIn applies the In predicate on the "about" field.
func AboutIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAbout), v...))
	})
}

// AboutNotIn applies the NotIn predicate on the "about" field.
func AboutNotIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAbout), v...))
	})
}

// AboutGT applies the GT predicate on the "about" field.
func AboutGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAbout), v))
	})
}

// AboutGTE applies the GTE predicate on the "about" field.
func AboutGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAbout), v))
	})
}

// AboutLT applies the LT predicate on the "about" field.
func AboutLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAbout), v))
	})
}

// AboutLTE applies the LTE predicate on the "about" field.
func AboutLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAbout), v))
	})
}

// AboutContains applies the Contains predicate on the "about" field.
func AboutContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAbout), v))
	})
}

// AboutHasPrefix applies the HasPrefix predicate on the "about" field.
func AboutHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAbout), v))
	})
}

// AboutHasSuffix applies the HasSuffix predicate on the "about" field.
func AboutHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAbout), v))
	})
}

// AboutEqualFold applies the EqualFold predicate on the "about" field.
func AboutEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAbout), v))
	})
}

// AboutContainsFold applies the ContainsFold predicate on the "about" field.
func AboutContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAbout), v))
	})
}

// ContactEQ applies the EQ predicate on the "contact" field.
func ContactEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContact), v))
	})
}

// ContactNEQ applies the NEQ predicate on the "contact" field.
func ContactNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContact), v))
	})
}

// ContactIn applies the In predicate on the "contact" field.
func ContactIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContact), v...))
	})
}

// ContactNotIn applies the NotIn predicate on the "contact" field.
func ContactNotIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContact), v...))
	})
}

// ContactGT applies the GT predicate on the "contact" field.
func ContactGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContact), v))
	})
}

// ContactGTE applies the GTE predicate on the "contact" field.
func ContactGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContact), v))
	})
}

// ContactLT applies the LT predicate on the "contact" field.
func ContactLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContact), v))
	})
}

// ContactLTE applies the LTE predicate on the "contact" field.
func ContactLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContact), v))
	})
}

// ContactContains applies the Contains predicate on the "contact" field.
func ContactContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContact), v))
	})
}

// ContactHasPrefix applies the HasPrefix predicate on the "contact" field.
func ContactHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContact), v))
	})
}

// ContactHasSuffix applies the HasSuffix predicate on the "contact" field.
func ContactHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContact), v))
	})
}

// ContactEqualFold applies the EqualFold predicate on the "contact" field.
func ContactEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContact), v))
	})
}

// ContactContainsFold applies the ContainsFold predicate on the "contact" field.
func ContactContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContact), v))
	})
}

// ReferencesEQ applies the EQ predicate on the "references" field.
func ReferencesEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferences), v))
	})
}

// ReferencesNEQ applies the NEQ predicate on the "references" field.
func ReferencesNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReferences), v))
	})
}

// ReferencesIn applies the In predicate on the "references" field.
func ReferencesIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReferences), v...))
	})
}

// ReferencesNotIn applies the NotIn predicate on the "references" field.
func ReferencesNotIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReferences), v...))
	})
}

// ReferencesGT applies the GT predicate on the "references" field.
func ReferencesGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReferences), v))
	})
}

// ReferencesGTE applies the GTE predicate on the "references" field.
func ReferencesGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReferences), v))
	})
}

// ReferencesLT applies the LT predicate on the "references" field.
func ReferencesLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReferences), v))
	})
}

// ReferencesLTE applies the LTE predicate on the "references" field.
func ReferencesLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReferences), v))
	})
}

// ReferencesContains applies the Contains predicate on the "references" field.
func ReferencesContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReferences), v))
	})
}

// ReferencesHasPrefix applies the HasPrefix predicate on the "references" field.
func ReferencesHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReferences), v))
	})
}

// ReferencesHasSuffix applies the HasSuffix predicate on the "references" field.
func ReferencesHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReferences), v))
	})
}

// ReferencesEqualFold applies the EqualFold predicate on the "references" field.
func ReferencesEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReferences), v))
	})
}

// ReferencesContainsFold applies the ContainsFold predicate on the "references" field.
func ReferencesContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReferences), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v bool) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v bool) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Settings) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Settings) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Settings) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		p(s.Not())
	})
}
