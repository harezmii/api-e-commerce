// Code generated by entc, DO NOT EDIT.

package ent

import (
	"api/ent/predicate"
	"api/ent/settings"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SettingsUpdate is the builder for updating Settings entities.
type SettingsUpdate struct {
	config
	hooks    []Hook
	mutation *SettingsMutation
}

// Where appends a list predicates to the SettingsUpdate builder.
func (su *SettingsUpdate) Where(ps ...predicate.Settings) *SettingsUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetTitle sets the "title" field.
func (su *SettingsUpdate) SetTitle(s string) *SettingsUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetKeywords sets the "keywords" field.
func (su *SettingsUpdate) SetKeywords(s string) *SettingsUpdate {
	su.mutation.SetKeywords(s)
	return su
}

// SetDescription sets the "description" field.
func (su *SettingsUpdate) SetDescription(s string) *SettingsUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetCompany sets the "company" field.
func (su *SettingsUpdate) SetCompany(s string) *SettingsUpdate {
	su.mutation.SetCompany(s)
	return su
}

// SetAddress sets the "address" field.
func (su *SettingsUpdate) SetAddress(s string) *SettingsUpdate {
	su.mutation.SetAddress(s)
	return su
}

// SetPhone sets the "phone" field.
func (su *SettingsUpdate) SetPhone(s string) *SettingsUpdate {
	su.mutation.SetPhone(s)
	return su
}

// SetFax sets the "fax" field.
func (su *SettingsUpdate) SetFax(s string) *SettingsUpdate {
	su.mutation.SetFax(s)
	return su
}

// SetEmail sets the "email" field.
func (su *SettingsUpdate) SetEmail(s string) *SettingsUpdate {
	su.mutation.SetEmail(s)
	return su
}

// SetMailServerAddress sets the "mailServerAddress" field.
func (su *SettingsUpdate) SetMailServerAddress(s string) *SettingsUpdate {
	su.mutation.SetMailServerAddress(s)
	return su
}

// SetMailServerEmail sets the "mailServerEmail" field.
func (su *SettingsUpdate) SetMailServerEmail(s string) *SettingsUpdate {
	su.mutation.SetMailServerEmail(s)
	return su
}

// SetMailServerPassword sets the "mailServerPassword" field.
func (su *SettingsUpdate) SetMailServerPassword(s string) *SettingsUpdate {
	su.mutation.SetMailServerPassword(s)
	return su
}

// SetMailServerPort sets the "mailServerPort" field.
func (su *SettingsUpdate) SetMailServerPort(s string) *SettingsUpdate {
	su.mutation.SetMailServerPort(s)
	return su
}

// SetFacebook sets the "facebook" field.
func (su *SettingsUpdate) SetFacebook(s string) *SettingsUpdate {
	su.mutation.SetFacebook(s)
	return su
}

// SetInstagram sets the "Instagram" field.
func (su *SettingsUpdate) SetInstagram(s string) *SettingsUpdate {
	su.mutation.SetInstagram(s)
	return su
}

// SetTwitter sets the "twitter" field.
func (su *SettingsUpdate) SetTwitter(s string) *SettingsUpdate {
	su.mutation.SetTwitter(s)
	return su
}

// SetAbout sets the "about" field.
func (su *SettingsUpdate) SetAbout(s string) *SettingsUpdate {
	su.mutation.SetAbout(s)
	return su
}

// SetContact sets the "contact" field.
func (su *SettingsUpdate) SetContact(s string) *SettingsUpdate {
	su.mutation.SetContact(s)
	return su
}

// SetReferences sets the "references" field.
func (su *SettingsUpdate) SetReferences(s string) *SettingsUpdate {
	su.mutation.SetReferences(s)
	return su
}

// SetStatus sets the "status" field.
func (su *SettingsUpdate) SetStatus(b bool) *SettingsUpdate {
	su.mutation.SetStatus(b)
	return su
}

// Mutation returns the SettingsMutation object of the builder.
func (su *SettingsUpdate) Mutation() *SettingsMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SettingsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SettingsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SettingsUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SettingsUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SettingsUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SettingsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   settings.Table,
			Columns: settings.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: settings.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldTitle,
		})
	}
	if value, ok := su.mutation.Keywords(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldKeywords,
		})
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldDescription,
		})
	}
	if value, ok := su.mutation.Company(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldCompany,
		})
	}
	if value, ok := su.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldAddress,
		})
	}
	if value, ok := su.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldPhone,
		})
	}
	if value, ok := su.mutation.Fax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldFax,
		})
	}
	if value, ok := su.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldEmail,
		})
	}
	if value, ok := su.mutation.MailServerAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldMailServerAddress,
		})
	}
	if value, ok := su.mutation.MailServerEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldMailServerEmail,
		})
	}
	if value, ok := su.mutation.MailServerPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldMailServerPassword,
		})
	}
	if value, ok := su.mutation.MailServerPort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldMailServerPort,
		})
	}
	if value, ok := su.mutation.Facebook(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldFacebook,
		})
	}
	if value, ok := su.mutation.Instagram(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldInstagram,
		})
	}
	if value, ok := su.mutation.Twitter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldTwitter,
		})
	}
	if value, ok := su.mutation.About(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldAbout,
		})
	}
	if value, ok := su.mutation.Contact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldContact,
		})
	}
	if value, ok := su.mutation.References(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldReferences,
		})
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: settings.FieldStatus,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{settings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SettingsUpdateOne is the builder for updating a single Settings entity.
type SettingsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SettingsMutation
}

// SetTitle sets the "title" field.
func (suo *SettingsUpdateOne) SetTitle(s string) *SettingsUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetKeywords sets the "keywords" field.
func (suo *SettingsUpdateOne) SetKeywords(s string) *SettingsUpdateOne {
	suo.mutation.SetKeywords(s)
	return suo
}

// SetDescription sets the "description" field.
func (suo *SettingsUpdateOne) SetDescription(s string) *SettingsUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetCompany sets the "company" field.
func (suo *SettingsUpdateOne) SetCompany(s string) *SettingsUpdateOne {
	suo.mutation.SetCompany(s)
	return suo
}

// SetAddress sets the "address" field.
func (suo *SettingsUpdateOne) SetAddress(s string) *SettingsUpdateOne {
	suo.mutation.SetAddress(s)
	return suo
}

// SetPhone sets the "phone" field.
func (suo *SettingsUpdateOne) SetPhone(s string) *SettingsUpdateOne {
	suo.mutation.SetPhone(s)
	return suo
}

// SetFax sets the "fax" field.
func (suo *SettingsUpdateOne) SetFax(s string) *SettingsUpdateOne {
	suo.mutation.SetFax(s)
	return suo
}

// SetEmail sets the "email" field.
func (suo *SettingsUpdateOne) SetEmail(s string) *SettingsUpdateOne {
	suo.mutation.SetEmail(s)
	return suo
}

// SetMailServerAddress sets the "mailServerAddress" field.
func (suo *SettingsUpdateOne) SetMailServerAddress(s string) *SettingsUpdateOne {
	suo.mutation.SetMailServerAddress(s)
	return suo
}

// SetMailServerEmail sets the "mailServerEmail" field.
func (suo *SettingsUpdateOne) SetMailServerEmail(s string) *SettingsUpdateOne {
	suo.mutation.SetMailServerEmail(s)
	return suo
}

// SetMailServerPassword sets the "mailServerPassword" field.
func (suo *SettingsUpdateOne) SetMailServerPassword(s string) *SettingsUpdateOne {
	suo.mutation.SetMailServerPassword(s)
	return suo
}

// SetMailServerPort sets the "mailServerPort" field.
func (suo *SettingsUpdateOne) SetMailServerPort(s string) *SettingsUpdateOne {
	suo.mutation.SetMailServerPort(s)
	return suo
}

// SetFacebook sets the "facebook" field.
func (suo *SettingsUpdateOne) SetFacebook(s string) *SettingsUpdateOne {
	suo.mutation.SetFacebook(s)
	return suo
}

// SetInstagram sets the "Instagram" field.
func (suo *SettingsUpdateOne) SetInstagram(s string) *SettingsUpdateOne {
	suo.mutation.SetInstagram(s)
	return suo
}

// SetTwitter sets the "twitter" field.
func (suo *SettingsUpdateOne) SetTwitter(s string) *SettingsUpdateOne {
	suo.mutation.SetTwitter(s)
	return suo
}

// SetAbout sets the "about" field.
func (suo *SettingsUpdateOne) SetAbout(s string) *SettingsUpdateOne {
	suo.mutation.SetAbout(s)
	return suo
}

// SetContact sets the "contact" field.
func (suo *SettingsUpdateOne) SetContact(s string) *SettingsUpdateOne {
	suo.mutation.SetContact(s)
	return suo
}

// SetReferences sets the "references" field.
func (suo *SettingsUpdateOne) SetReferences(s string) *SettingsUpdateOne {
	suo.mutation.SetReferences(s)
	return suo
}

// SetStatus sets the "status" field.
func (suo *SettingsUpdateOne) SetStatus(b bool) *SettingsUpdateOne {
	suo.mutation.SetStatus(b)
	return suo
}

// Mutation returns the SettingsMutation object of the builder.
func (suo *SettingsUpdateOne) Mutation() *SettingsMutation {
	return suo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SettingsUpdateOne) Select(field string, fields ...string) *SettingsUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Settings entity.
func (suo *SettingsUpdateOne) Save(ctx context.Context) (*Settings, error) {
	var (
		err  error
		node *Settings
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SettingsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SettingsUpdateOne) SaveX(ctx context.Context) *Settings {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SettingsUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SettingsUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SettingsUpdateOne) sqlSave(ctx context.Context) (_node *Settings, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   settings.Table,
			Columns: settings.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: settings.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Settings.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, settings.FieldID)
		for _, f := range fields {
			if !settings.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != settings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldTitle,
		})
	}
	if value, ok := suo.mutation.Keywords(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldKeywords,
		})
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldDescription,
		})
	}
	if value, ok := suo.mutation.Company(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldCompany,
		})
	}
	if value, ok := suo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldAddress,
		})
	}
	if value, ok := suo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldPhone,
		})
	}
	if value, ok := suo.mutation.Fax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldFax,
		})
	}
	if value, ok := suo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldEmail,
		})
	}
	if value, ok := suo.mutation.MailServerAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldMailServerAddress,
		})
	}
	if value, ok := suo.mutation.MailServerEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldMailServerEmail,
		})
	}
	if value, ok := suo.mutation.MailServerPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldMailServerPassword,
		})
	}
	if value, ok := suo.mutation.MailServerPort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldMailServerPort,
		})
	}
	if value, ok := suo.mutation.Facebook(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldFacebook,
		})
	}
	if value, ok := suo.mutation.Instagram(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldInstagram,
		})
	}
	if value, ok := suo.mutation.Twitter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldTwitter,
		})
	}
	if value, ok := suo.mutation.About(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldAbout,
		})
	}
	if value, ok := suo.mutation.Contact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldContact,
		})
	}
	if value, ok := suo.mutation.References(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldReferences,
		})
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: settings.FieldStatus,
		})
	}
	_node = &Settings{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{settings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
