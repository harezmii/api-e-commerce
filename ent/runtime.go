// Code generated by entc, DO NOT EDIT.

package ent

import (
	"api/ent/faq"
	"api/ent/profile"
	"api/ent/schema"
	"api/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	faqFields := schema.Faq{}.Fields()
	_ = faqFields
	// faqDescQuestion is the schema descriptor for question field.
	faqDescQuestion := faqFields[0].Descriptor()
	// faq.QuestionValidator is a validator for the "question" field. It is called by the builders before save.
	faq.QuestionValidator = faqDescQuestion.Validators[0].(func(string) error)
	// faqDescStatus is the schema descriptor for status field.
	faqDescStatus := faqFields[2].Descriptor()
	// faq.DefaultStatus holds the default value on creation for the status field.
	faq.DefaultStatus = faqDescStatus.Default.(bool)
	// faqDescCreatedAt is the schema descriptor for created_at field.
	faqDescCreatedAt := faqFields[3].Descriptor()
	// faq.DefaultCreatedAt holds the default value on creation for the created_at field.
	faq.DefaultCreatedAt = faqDescCreatedAt.Default.(func() time.Time)
	profileFields := schema.Profile{}.Fields()
	_ = profileFields
	// profileDescCreatedAt is the schema descriptor for created_at field.
	profileDescCreatedAt := profileFields[3].Descriptor()
	// profile.DefaultCreatedAt holds the default value on creation for the created_at field.
	profile.DefaultCreatedAt = profileDescCreatedAt.Default.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[5].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
}
