// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://e-ticaret-api.herokuapp.com/api/v1/",
        "contact": {
            "name": "Api Support",
            "url": "https://e-ticaret-api.herokuapp.com/support",
            "email": "suatcnby06@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/faq": {
            "get": {
                "description": "get all faqs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Faqs"
                ],
                "summary": "All  Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/faq.Faq"
                        }
                    }
                }
            },
            "post": {
                "description": "create faqs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Faqs"
                ],
                "summary": "Create Data",
                "parameters": [
                    {
                        "description": "Faq form",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/faq.Faq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/faq.Faq"
                            }
                        }
                    }
                }
            }
        },
        "/faq/{id}": {
            "get": {
                "description": "get string by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Faqs"
                ],
                "summary": "Show Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Faq ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/faq.Faq"
                        }
                    }
                }
            },
            "put": {
                "description": "update faq",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Faqs"
                ],
                "summary": "Update Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Faq Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Faq update form",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/faq.Faq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/faq.Faq"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete faqs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Faqs"
                ],
                "summary": "Delete Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Faq ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/faq.Faq"
                            }
                        }
                    }
                }
            }
        },
        "/profile": {
            "get": {
                "description": "get all Profiles",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profiles"
                ],
                "summary": "All  Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/profile.Profile"
                        }
                    }
                }
            }
        },
        "/profile/{id}": {
            "get": {
                "description": "get string by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profiles"
                ],
                "summary": "Show Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Profile ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/profile.Profile"
                        }
                    }
                }
            },
            "put": {
                "description": "update Profile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profiles"
                ],
                "summary": "Profile Update Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Profile Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Profile update form",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/profile.Profile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/profile.Profile"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete Profiles",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profiles"
                ],
                "summary": "Delete Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Profile ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/profile.Profile"
                            }
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "description": "get all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "All  Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    }
                }
            },
            "post": {
                "description": "create users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create Data",
                "parameters": [
                    {
                        "description": "User form",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/user.User"
                            }
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "description": "get string by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Show Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    }
                }
            },
            "put": {
                "description": "update user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "User Update Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update form",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/user.User"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "faq.Faq": {
            "type": "object",
            "required": [
                "answer",
                "question",
                "status"
            ],
            "properties": {
                "answer": {
                    "type": "string"
                },
                "question": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                }
            }
        },
        "profile.Profile": {
            "type": "object",
            "required": [
                "address",
                "image",
                "phone",
                "userId"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "user.User": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "status",
                "surname"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                },
                "surname": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "e-ticaret-api.herokuapp.com",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "E Commerce API",
	Description: "This is e-commerce server.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
