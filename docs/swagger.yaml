basePath: /api/v1
definitions:
  entity.Category:
    properties:
      description:
        maxLength: 250
        minLength: 10
        type: string
      image:
        type: string
      keywords:
        maxLength: 250
        minLength: 3
        type: string
      status:
        type: boolean
      title:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - description
    - image
    - keywords
    - status
    - title
    type: object
  entity.Comment:
    properties:
      comment:
        type: string
      contentId:
        type: integer
      ip:
        type: string
      rate:
        type: number
      status:
        type: boolean
      userId:
        type: integer
    required:
    - comment
    - ip
    - rate
    - status
    type: object
  entity.Faq:
    properties:
      answer:
        maxLength: 250
        minLength: 3
        type: string
      question:
        maxLength: 40
        minLength: 3
        type: string
      status:
        type: boolean
    required:
    - answer
    - question
    - status
    type: object
  entity.Image:
    properties:
      contentId:
        type: integer
      image:
        type: string
      title:
        maxLength: 50
        minLength: 3
        type: string
      url:
        type: string
    required:
    - title
    type: object
  entity.Message:
    properties:
      email:
        type: string
      ip:
        type: string
      message:
        maxLength: 250
        minLength: 5
        type: string
      name:
        maxLength: 30
        minLength: 3
        type: string
      phone:
        maxLength: 15
        minLength: 10
        type: string
      status:
        type: boolean
      subject:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - email
    - ip
    - message
    - name
    - phone
    - status
    - subject
    type: object
  entity.Product:
    properties:
      description:
        type: string
      image:
        type: string
      keywords:
        type: string
      status:
        type: boolean
      title:
        type: string
      url:
        type: string
    required:
    - description
    - keywords
    - status
    - title
    type: object
  entity.Profile:
    properties:
      address:
        type: string
      image:
        type: string
      phone:
        maxLength: 15
        minLength: 10
        type: string
      url:
        type: string
      userId:
        type: integer
    required:
    - address
    - phone
    type: object
  entity.User:
    properties:
      email:
        type: string
      name:
        minLength: 3
        type: string
      password:
        minLength: 8
        type: string
      status:
        type: boolean
      surname:
        minLength: 3
        type: string
    required:
    - email
    - name
    - password
    - status
    - surname
    type: object
host: localhost:3500
info:
  contact:
    email: suatcnby06@gmail.com
    name: Api Support
    url: https://e-ticaret-api.herokuapp.com/support
  description: This is e-commerce server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://e-ticaret-api.herokuapp.com/api/v1/
  title: E Commerce API
  version: "1.0"
paths:
  /categories:
    get:
      consumes:
      - application/json
      description: Get all categories
      parameters:
      - description: Offset
        in: query
        name: offset
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Category'
      summary: All  Data
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: create categories
      parameters:
      - description: Category form
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/entity.Category'
            type: array
      summary: Create Data
      tags:
      - Categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: delete categories
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Category'
            type: array
      summary: Delete Data
      tags:
      - Categories
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Category'
      summary: Show Data
      tags:
      - Categories
    put:
      consumes:
      - application/json
      description: update category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Category update form
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Category'
      summary: Update Data
      tags:
      - Categories
  /comments:
    get:
      consumes:
      - application/json
      description: Get all comments
      parameters:
      - description: Offset
        in: query
        name: offset
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Comment'
      summary: All  Data
      tags:
      - Comments
    post:
      consumes:
      - application/json
      description: create comments
      parameters:
      - description: comment form
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.Comment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/entity.Comment'
            type: array
      summary: Create Data
      tags:
      - Comments
  /comments/{id}:
    delete:
      consumes:
      - application/json
      description: delete comments
      parameters:
      - description: comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Comment'
            type: array
      summary: Delete Data
      tags:
      - Comments
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Comment'
      summary: Show Data
      tags:
      - Comments
    put:
      consumes:
      - application/json
      description: update comment
      parameters:
      - description: comment ID
        in: path
        name: id
        required: true
        type: string
      - description: comment update form
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Comment'
      summary: Update Data
      tags:
      - Comments
  /faqs:
    get:
      consumes:
      - application/json
      description: get all faqs
      parameters:
      - description: Offset
        in: query
        name: offset
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Faq'
      summary: All  Data
      tags:
      - Faqs
    post:
      consumes:
      - application/json
      description: create faqs
      parameters:
      - description: Faq form
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.Faq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/entity.Faq'
            type: array
      summary: Create Data
      tags:
      - Faqs
  /faqs/{id}:
    delete:
      consumes:
      - application/json
      description: delete faqs
      parameters:
      - description: Faq ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Faq'
            type: array
      summary: Delete Data
      tags:
      - Faqs
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: Faq ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Faq'
      summary: Show Data
      tags:
      - Faqs
    put:
      consumes:
      - application/json
      description: update faq
      parameters:
      - description: Faq Id
        in: path
        name: id
        required: true
        type: string
      - description: Faq update form
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.Faq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Faq'
      summary: Update Data
      tags:
      - Faqs
  /images:
    get:
      consumes:
      - application/json
      description: Get all images
      parameters:
      - description: Offset
        in: query
        name: offset
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Image'
      summary: All  Data
      tags:
      - Images
    post:
      consumes:
      - application/json
      description: create Image
      parameters:
      - description: Image form
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.Image'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/entity.Image'
            type: array
      summary: Create Data
      tags:
      - Images
  /images/{id}:
    delete:
      consumes:
      - application/json
      description: delete images
      parameters:
      - description: Image ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Image'
            type: array
      summary: Delete Data
      tags:
      - Images
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: Image ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Image'
      summary: Show Data
      tags:
      - Images
    put:
      consumes:
      - application/json
      description: update images
      parameters:
      - description: images ID
        in: path
        name: id
        required: true
        type: string
      - description: image update form
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.Image'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Image'
      summary: Update Data
      tags:
      - Images
  /messages:
    get:
      consumes:
      - application/json
      description: Get all messages
      parameters:
      - description: Offset
        in: query
        name: offset
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Message'
      summary: All  Data
      tags:
      - Messages
    post:
      consumes:
      - application/json
      description: create messages
      parameters:
      - description: Message form
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.Message'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/entity.Message'
            type: array
      summary: Create Data
      tags:
      - Messages
  /messages/{id}:
    delete:
      consumes:
      - application/json
      description: delete messages
      parameters:
      - description: Message ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Message'
            type: array
      summary: Delete Data
      tags:
      - Messages
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: Message ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Message'
      summary: Show Data
      tags:
      - Messages
    put:
      consumes:
      - application/json
      description: update message
      parameters:
      - description: Message ID
        in: path
        name: id
        required: true
        type: string
      - description: Message update form
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.Message'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Message'
      summary: Update Data
      tags:
      - Messages
  /products:
    get:
      consumes:
      - application/json
      description: Get all products
      parameters:
      - description: Offset
        in: query
        name: offset
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
      summary: All  Data
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: create products
      parameters:
      - description: Product form
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/entity.Product'
            type: array
      summary: Create Data
      tags:
      - Products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: delete products
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Product'
            type: array
      summary: Delete Data
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: update products
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product update form
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
      summary: Update Data
      tags:
      - Products
  /profiles/{id}:
    delete:
      consumes:
      - application/json
      description: User Delete Profiles
      parameters:
      - description: Profile ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Profile'
            type: array
      summary: Delete Profile
      tags:
      - Profiles
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: Profile ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Profile'
      summary: Show Profile
      tags:
      - Profiles
  /users:
    post:
      consumes:
      - application/json
      description: create users
      parameters:
      - description: User form
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/entity.User'
            type: array
      summary: Create Data
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: delete users
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.User'
            type: array
      summary: Delete Data
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
      summary: Show Data
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: update user
      parameters:
      - description: User Id
        in: path
        name: id
        required: true
        type: string
      - description: User update form
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
      summary: User Update Data
      tags:
      - Users
  /users/{id}/profiles:
    post:
      consumes:
      - application/json
      description: Created or Updated Profile
      parameters:
      - description: User Id
        in: path
        name: id
        required: true
        type: string
      - description: Profile store or update fom
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.Profile'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Profile'
      summary: Profile Created or Updated Profile
      tags:
      - Profiles
swagger: "2.0"
