basePath: /api/v1
definitions:
  entity.Faq:
    properties:
      answer:
        type: string
      question:
        type: string
      status:
        type: boolean
    required:
    - answer
    - question
    - status
    type: object
  entity.Profile:
    properties:
      address:
        type: string
      image:
        type: string
      phone:
        type: string
      userId:
        type: integer
    required:
    - address
    - image
    - phone
    - userId
    type: object
  entity.User:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      status:
        type: boolean
      surname:
        type: string
    required:
    - email
    - name
    - password
    - status
    - surname
    type: object
host: localhost:3500
info:
  contact:
    email: suatcnby06@gmail.com
    name: Api Support
    url: https://e-ticaret-api.herokuapp.com/support
  description: This is e-commerce server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://e-ticaret-api.herokuapp.com/api/v1/
  title: E Commerce API
  version: "1.0"
paths:
  /faqs:
    get:
      consumes:
      - application/json
      description: get all faqs
      parameters:
      - description: Offset
        in: query
        name: offset
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Faq'
      summary: All  Data
      tags:
      - Faqs
    post:
      consumes:
      - application/json
      description: create faqs
      parameters:
      - description: Faq form
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.Faq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/entity.Faq'
            type: array
      summary: Create Data
      tags:
      - Faqs
  /faqs/{id}:
    delete:
      consumes:
      - application/json
      description: delete faqs
      parameters:
      - description: Faq ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Faq'
            type: array
      summary: Delete Data
      tags:
      - Faqs
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: Faq ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Faq'
      summary: Show Data
      tags:
      - Faqs
    put:
      consumes:
      - application/json
      description: update faq
      parameters:
      - description: Faq Id
        in: path
        name: id
        required: true
        type: string
      - description: Faq update form
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.Faq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Faq'
      summary: Update Data
      tags:
      - Faqs
  /profiles:
    post:
      consumes:
      - application/json
      description: create Profiles
      parameters:
      - description: Profile form
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.Profile'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/entity.Profile'
            type: array
      summary: Create Data
      tags:
      - Profiles
  /profiles/{id}:
    delete:
      consumes:
      - application/json
      description: delete Profiles
      parameters:
      - description: Profile ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Profile'
            type: array
      summary: Delete Data
      tags:
      - Profiles
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: Profile ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Profile'
      summary: Show Data
      tags:
      - Profiles
    put:
      consumes:
      - application/json
      description: update Profile
      parameters:
      - description: Profile Id
        in: path
        name: id
        required: true
        type: string
      - description: Profile update fom
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.Profile'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Profile'
      summary: Profile Update Data
      tags:
      - Profiles
  /users:
    post:
      consumes:
      - application/json
      description: create users
      parameters:
      - description: User form
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/entity.User'
            type: array
      summary: Create Data
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: delete users
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.User'
            type: array
      summary: Delete Data
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
      summary: Show Data
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: update user
      parameters:
      - description: User Id
        in: path
        name: id
        required: true
        type: string
      - description: User update form
        in: body
        name: body
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
      summary: User Update Data
      tags:
      - Users
swagger: "2.0"
